!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";e(1);var r,o=function(){function t(t,n){this.typos=t,this.wrap=n}return t.prototype.getSize=function(){return{width:this.wrap.offsetWidth,height:this.wrap.offsetHeight}},t.prototype.setSize=function(){var t=this.getSize(),n=t.width,e=t.height,r=Math.min(n,e)/6;this.wrap.style.fontSize=r+"px"},t.prototype.calculateMousePosition=function(t){return{mouseX:t.clientX,mouseY:t.clientY}},t.prototype.positionAnimation=function(t,n,e){var r=this.getSize(),o=r.width,i=r.height,a=this.calculateMousePosition(t),s=o-a.mouseX-70,f=i-a.mouseY-70;console.log(s,f),n.forEach(function(t){t.style.transform="translate(-"+s+"px, -"+f+"px)"}),e.forEach(function(t){t.style.transform="translate("+s+"px, "+f+"px)"})},t.prototype.draw=function(){for(var t=document.createElement("div"),n=0,e=this.typos;n<e.length;n++){var r=e[n],o=document.createElement("div");o.classList.add("typo");for(var i=0;i<3;i++){var a=document.createElement("div");a.classList.add("typo_item"),a.classList.add("typo_item--"+(i+1)),a.textContent=r,o.appendChild(a)}t.appendChild(o)}this.wrap.appendChild(t),this.setSize()},t}(),i=document.querySelector(".main"),a=new o(["HELLO,","I am","박치혜,","Front-end","Developer"],i);a.draw(),window.addEventListener("resize",function(){r||(r=setTimeout(function(){r=null,a.setSize()},66))},!1);var s=document.querySelector(".btn_enter");s.addEventListener("mouseenter",function(t){i.classList.add("is-stop")}),s.addEventListener("mouseleave",function(t){i.classList.remove("is-stop")})},function(t,n,e){var r=e(2);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(4)(r,o);r.locals&&(t.exports=r.locals)},function(t,n,e){(n=t.exports=e(3)(!1)).push([t.i,"@import url(https://fonts.googleapis.com/css?family=Chivo:900i|East+Sea+Dokdo|Press+Start+2P);",""]),n.push([t.i,'.acc-hidden {\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  margin: -1px;\n  position: absolute;\n  clip: rect(0, 0, 0, 0); }\n\nhtml, body {\n  width: 100%;\n  height: 100%;\n  overflow: hidden; }\n\nbody {\n  margin: 0;\n  padding: 0; }\n\n.main {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  font-size: 120px;\n  font-family: "Chivo", "East Sea Dokdo", sans-serif;\n  position: relative; }\n  .main > div {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column; }\n\n@keyframes Shake1 {\n  0% {\n    transform: translate(5px, 5px); }\n  50% {\n    transform: translate(-5px, -5px); }\n  100% {\n    transform: translate(5px, 5px); } }\n\n@keyframes Shake2 {\n  0% {\n    transform: translate(-5px, -5px); }\n  50% {\n    transform: translate(5px, 5px); }\n  100% {\n    transform: translate(-5px, -5px); } }\n\n.typo {\n  padding: 0 10px;\n  position: relative; }\n  .typo_item {\n    top: 0;\n    mix-blend-mode: multiply;\n    transition: transform 0.3; }\n    .typo_item:nth-child(1) {\n      position: absolute;\n      left: 0;\n      color: #dcff41;\n      z-index: 1;\n      animation: Shake1 0.2s infinite; }\n    .typo_item:nth-child(2) {\n      position: relative;\n      color: #f820ff;\n      z-index: 2; }\n    .typo_item:nth-child(3) {\n      position: absolute;\n      left: 20px;\n      color: #41fff5;\n      z-index: 3;\n      animation: Shake2 0.2s infinite; }\n    .is-stop .typo_item {\n      animation: none; }\n\n@keyframes longCircle1 {\n  from {\n    transform: rotate(0deg) translate(0) rotate(0deg); }\n  to {\n    transform: rotate(-360deg) translate(0) rotate(-360deg); } }\n\n@keyframes longCircle2 {\n  from {\n    transform: rotate(120deg) translate(0) rotate(120deg); }\n  to {\n    transform: rotate(-240deg) translate(0) rotate(-240deg); } }\n\n@keyframes longCircle3 {\n  from {\n    transform: rotate(240deg) translate(0) rotate(240deg); }\n  to {\n    transform: rotate(-120deg) translate(0) rotate(-120deg); } }\n\n.btn_enter {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100px;\n  height: 100px;\n  border-radius: 100%;\n  color: #fff;\n  text-decoration: none;\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  z-index: 999;\n  mix-blend-mode: multiply; }\n  .btn_enter .enter_circle {\n    width: 100px;\n    height: 100px;\n    border-radius: 100%;\n    position: absolute;\n    transition: transform-origin 0.3s;\n    mix-blend-mode: multiply; }\n    .btn_enter .enter_circle--yellow {\n      background-color: #dcff41;\n      transform-origin: 40% 60%;\n      animation: longCircle1 1.8s linear infinite; }\n    .btn_enter .enter_circle--magenta {\n      background-color: #f820ff;\n      transform-origin: 40% 60%;\n      animation: longCircle2 1.8s linear infinite; }\n    .btn_enter .enter_circle--cyan {\n      background-color: #41fff5;\n      transform-origin: 40% 60%;\n      animation: longCircle3 1.8s linear infinite; }\n  .btn_enter:hover .enter_circle {\n    transform-origin: 50% 50%; }\n  .btn_enter .text {\n    color: #fff;\n    font-family: "Press Start 2P", cursive;\n    position: relative;\n    border-bottom: 1px solid #fff; }\n',""])},function(t,n){t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var o=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[e].concat(i).concat([o]).join("\n")}return[e].join("\n")}(n,t);return n[2]?"@media "+n[2]+"{"+e+"}":e}).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];"number"==typeof a[0]&&r[a[0]]||(e&&!a[2]?a[2]=e:e&&(a[2]="("+a[2]+") and ("+e+")"),n.push(a))}},n}},function(t,n,e){var r={},o=function(t){var n;return function(){return void 0===n&&(n=t.apply(this,arguments)),n}}(function(){return window&&document&&document.all&&!window.atob}),i=function(t){var n={};return function(t,e){if("function"==typeof t)return t();if(void 0===n[t]){var r=function(t,n){return n?n.querySelector(t):document.querySelector(t)}.call(this,t,e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}n[t]=r}return n[t]}}(),a=null,s=0,f=[],l=e(5);function c(t,n){for(var e=0;e<t.length;e++){var o=t[e],i=r[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(v(o.parts[a],n))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(v(o.parts[a],n));r[o.id]={id:o.id,refs:1,parts:s}}}}function u(t,n){for(var e=[],r={},o=0;o<t.length;o++){var i=t[o],a=n.base?i[0]+n.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):e.push(r[a]={id:a,parts:[s]})}return e}function p(t,n){var e=i(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=f[f.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),f.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(t.insertAt.before,e);e.insertBefore(n,o)}}function d(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=f.indexOf(t);n>=0&&f.splice(n,1)}function m(t){var n=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return e.nc}();r&&(t.attrs.nonce=r)}return h(n,t.attrs),p(t,n),n}function h(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function v(t,n){var e,r,o,i;if(n.transform&&t.css){if(!(i=n.transform(t.css)))return function(){};t.css=i}if(n.singleton){var f=s++;e=a||(a=m(n)),r=g.bind(null,e,f,!1),o=g.bind(null,e,f,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",h(n,t.attrs),p(t,n),n}(n),r=function(t,n,e){var r=e.css,o=e.sourceMap,i=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||i)&&(r=l(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,e,n),o=function(){d(e),e.href&&URL.revokeObjectURL(e.href)}):(e=m(n),r=function(t,n){var e=n.css,r=n.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}.bind(null,e),o=function(){d(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else o()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=o()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=u(t,n);return c(e,n),function(t){for(var o=[],i=0;i<e.length;i++){var a=e[i];(s=r[a.id]).refs--,o.push(s)}t&&c(u(t,n),n);for(i=0;i<o.length;i++){var s;if(0===(s=o[i]).refs){for(var f=0;f<s.parts.length;f++)s.parts[f]();delete r[s.id]}}}};var y=function(){var t=[];return function(n,e){return t[n]=e,t.filter(Boolean).join("\n")}}();function g(t,n,e,r){var o=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=y(n,o);else{var i=document.createTextNode(o),a=t.childNodes;a[n]&&t.removeChild(a[n]),a.length?t.insertBefore(i,a[n]):t.appendChild(i)}}},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,r=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var o,i=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?e+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,